# Python core libraries
import sys
import os
import logging
from functools import partial

# PyQT5 files
from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QApplication, QLabel, QWidget, QGridLayout, QLineEdit, QSystemTrayIcon
from PyQt5.QtCore import QThread
from PyQt5.QtGui import QIcon

# Window file generated by QT Designer
from gui.window_ui import Ui_MainWindow

from user import User
from config import assets

if __debug__:
    from gui.logger_ui import LoggerDialog


class MainWindow(QMainWindow, Ui_MainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()
        self.setupUi(self)

        icon = QIcon(assets['nautiljon_icon'])
        self.systemtray_icon = QSystemTrayIcon(icon)
        self.systemtray_icon.show()

        self.setWindowIcon(icon)

        self.workerThread = QThread()
        self.user = User()
        self.user.moveToThread(self.workerThread)

    def displayLoginForm(self, display, showError = False):
        if display:
            self.loginForm.setVisible(False)
            self.connectError.setVisible(False)
            self.connectSuccess.setVisible(True)
            self.notificationButton.setVisible(True)
        else:
            self.loginForm.setVisible(True)
            self.connectSuccess.setVisible(False)
            self.connectError.setVisible(showError)
            self.notificationButton.setVisible(False)

    def cleanUp(self):
        self.workerThread.quit()
        self.workerThread.wait()
        self.user.cleanUp()

    def onTestNotification(self, checked):
        if self.user.avatar:
            self.systemtray_icon.showMessage("Titre", "Message", self.user.avatar)
        else:
            self.systemtray_icon.showMessage("Titre", "Message", QIcon(assets['nautiljon_icon']))

    def onConnect(self, checked):
        if self.workerThread.isRunning():
            return

        logging.debug('Connect button clicked')
        username = self.usernameInput.text()
        password = self.passwordInput.text()

        def finishedConnect(success):
            self.workerThread.exit()
            self.displayLoginForm(success, True)

        self.workerThread.quit()
        self.user.finished.connect(finishedConnect)
        self.workerThread.started.connect(partial(self.user.connect, username, password))
        self.workerThread.start()

def main():
    app = QApplication(sys.argv)

    main_window = MainWindow()

    if __debug__:
        logger_window = LoggerDialog(main_window)
        logger_window.move(0, 0)
        logger_window.setGeometry(0, 0, 1000, 300)
        logger_window.show()

    main_window.user.init()
    main_window.displayLoginForm(main_window.user.connected)
    main_window.show()


    ret = app.exec_()
    main_window.cleanUp()
    sys.exit(ret)

if __name__ == "__main__":
    main()
